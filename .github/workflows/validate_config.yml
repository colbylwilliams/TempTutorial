name: Validate Config

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: The Environment Type
        required: true

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Validate Environment Secrets
        shell: python
        run: |
          import os

          environment_type = '${{ inputs.environment }}'

          if environment_type not in ['Dev', 'Test', 'Prod']:
              print(f'::error title=Invalid environment type: {environment_type}::Please set the environment to one of Dev, Test, or Prod.')
              exit(1)

          required_secrets = {
              'AZURE_CLIENT_ID': 'the app id (or client id) of your service principal'
          }

          secrets = ${{ toJson( secrets ) }}

          for k, v in required_secrets.items():
              if k not in secrets:
                  print(f'::error title=Missing required environment secret: {k}::Please create a new secret for the {environment_type} environment named {k} with {v}. https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-an-environment')
                  exit(1)

      - name: Validate Repository Variables
        shell: python
        run: |
          import os

          required_vars = {
              'AZURE_PROJECT': 'the name of your dev center project',
              'AZURE_DEVCENTER': 'the name of your dev center',
              'AZURE_TENANT_ID': 'your Azure tenant Id (GUID)',
              'AZURE_SUBSCRIPTION_ID': 'your Azure subscription Id (GUID)'
          }

          summary = [ '|  |  |', '| --- | --- |' ]

          variables = ${{ toJson( vars ) }}

          for k, v in required_vars.items():
              if k not in variables:
                  print(f'::error title=Missing required repository variable: {k}::Please create a new repository variable named {k} with {v}. https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository')
                  exit(1)
              summary.append(f'| {k} | {variables[k]} |')

          github_step_summary = os.environ.get('GITHUB_STEP_SUMMARY', None)
          with open(github_step_summary, 'a+') as f:
              f.write('\n'.join(summary))
