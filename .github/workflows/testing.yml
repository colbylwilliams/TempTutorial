name: Tests

permissions:
  id-token: write
  contents: read

on:
  push: # TODO: remove

  workflow_dispatch:
    inputs:
      environmentName:
        description: Environment
        type: choice
        options:
          - Dev
          - Test
          - Prod

jobs:
  config:
    name: Get Configuration
    uses: ./.github/workflows/environment_config.yml

  do_tha_thing:
    runs-on: ubuntu-latest
    needs: config
    environment:
      name: ${{ needs.config.outputs.type }}
    env:
      ENVIRONMENT_NAME: ${{ needs.config.outputs.name }}
      ENVIRONMENT_TYPE: ${{ needs.config.outputs.type }}

    steps:
      - name: Validate Environment Secrets
        shell: python
        run: |
          import os

          if (environment_type := os.getenv('ENVIRONMENT_TYPE')) is None:
              print('::error title=Environment not set: ENVIRONMENT_TYPE::Please set the environment variable ENVIRONMENT_TYPE.')
              exit(1)

          if environment_type not in ['Dev', 'Test', 'Prod']:
              print('::error title=Invalid environment type: {environment_type}::Please set the environment to one of Dev, Test, or Prod.')
              exit(1)

          required_secrets = {
              'AZURE_CLIENT_ID': 'the app id (or client id) of your service principal'
          }

          secrets = ${{ toJson( secrets ) }}

          for k, v in required_secrets.items():
              if k not in secrets:
                  print(f'::error title=Missing required environment secret: {k}::Please create a new secret for the {environment_type} environment named {k} with {v}. https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-an-environment')
                  exit(1)

      - name: Validate Repository Variables
        shell: python
        run: |
          required_vars = {
              'AZURE_TENANT_ID': 'your Azure tenant Id (GUID)',
              'AZURE_SUBSCRIPTION_ID': 'your Azure subscription Id (GUID)',
              'AZURE_DEVCENTER': 'the name of your dev center',
              'AZURE_PROJECT': 'the name of your dev center project'
          }

          variables = ${{ toJson( vars ) }}

          for k, v in required_vars.items():
              if k not in variables:
                  print(f'::error title=Missing required repository variable: {k}::Please create a new repository variable named {k} with {v}. https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository')
                  exit(1)

      - name: Echo
        run: |
          echo "AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}"
          echo "AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}"
          echo "AZURE_DEVCENTER: ${{ vars.AZURE_DEVCENTER }}"
          echo "AZURE_PROJECT: ${{ vars.AZURE_PROJECT }}"
          echo "ENVIRONMENT_TYPE: ${{ env.ENVIRONMENT_TYPE }}"
          echo "ENVIRONMENT_NAME: ${{ env.ENVIRONMENT_NAME }}"

      - name: Install DevCenter CLI Extension
        run: az extension add --name devcenter --upgrade

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Show Project
        run: az devcenter dev project show --dev-center ${{ vars.AZURE_DEVCENTER }} --name ${{ vars.AZURE_PROJECT }}

      - name: List Catalog Items
        run: az devcenter dev catalog-item list --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }}

      - name: List Env Types
        run: az devcenter dev environment-type list --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }}

      # - name: 'Run az commands'
      #   run: |
      #     az account show
      #     az group list
      #     pwd

      # - name: Echo environment ClientId
      #   run: echo "${{ secrets.AZURE_CLIENT_ID }}"
