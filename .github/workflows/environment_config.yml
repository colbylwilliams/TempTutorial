name: Environment Config

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      name:
        description: 'The name of the environment'
        value: ${{ jobs.env_config.outputs.name }}
      type:
        description: 'The type of the environment'
        value: ${{ jobs.env_config.outputs.type }}

env:
  # format: ci-[branch|pr]-[branch name|pr number]-suffexe
  ENVIRONMENT_NAME: ci-${{ github.event_name == 'pull_request' && 'pr' || 'branch' }}-${{ github.event_name == 'pull_request' && github.event.number || github.event_name == 'push' && github.ref_name || github.event.ref }}-${{ github.event.repository.id }}

  # branch/Pull request | Environment Type
  # --------------------------------------
  # feature branches    | Dev
  # feature -> main PR  | Test
  # main branch         | Prod
  ENVIRONMENT_TYPE: ${{ github.event_name == 'push' && (github.event.ref == 'refs/heads/main' && 'Prod' || 'Dev') || github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' && 'Test') || 'Dev' }}

jobs:
  env_config:
    name: Config
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      name: ${{ steps.get_config.outputs.name }}
      type: ${{ steps.get_config.outputs.type }}

    steps:
      # - run: echo "- **Environment Name**  $ENVIRONMENT_NAME" >> $GITHUB_STEP_SUMMARY
      # - run: echo "- **Environment Type**  $ENVIRONMENT_TYPE" >> $GITHUB_STEP_SUMMARY

      - id: get_config
        name: Set Outputs
        run: |
          echo "name=$ENVIRONMENT_NAME" >> $GITHUB_OUTPUT
          echo "type=$ENVIRONMENT_TYPE" >> $GITHUB_OUTPUT

      # - name: Ensure GitHub Environments
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const environments_result = await github.rest.repos.getAllEnvironments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #       });

      #       const environments = environments_result.data.environments;

      #       const names = ['Dev', 'Test', 'Pre-Prod', 'Prod'];

      #       for (let i = 0; i < names.length; i++) {
      #         const name = names[i];
      #         const exists = environments.some(e => e.name === name);
      #         if (!exists) {
      #           core.setFailed(`A GitHub environment named '${name}' does not exist. Create an environment nammed '${name}' with a secret named 'AZURE_CREDENTIALS'`);
      #         }
      #       }
