# This workflow is called by other workflows It is used to:
#  1. Create a consistant name for the deployment environment
#  2. Determine the environment type for the environment

name: Environment Config

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      name:
        description: 'The name of the environment'
        value: ${{ jobs.env_config.outputs.name }}
      type:
        description: 'The type of the environment'
        value: ${{ jobs.env_config.outputs.type }}

env:
  # format: ci-[branch|pr]-[branch name|pr number]-suffexe
  ENVIRONMENT_NAME: ci-${{ github.event_name == 'pull_request' && 'pr' || 'branch' }}-${{ github.event_name == 'pull_request' && github.event.number || github.event_name == 'push' && github.ref_name || github.event.ref }}-${{ github.event.repository.id }}

  # branch/Pull request | Environment Type
  # --------------------------------------
  # feature branches    | Dev
  # PR feature -> main  | Test
  # main branch         | Prod
  ENVIRONMENT_TYPE: ${{ github.event_name == 'push' && (github.event.ref == 'refs/heads/main' && 'Prod' || 'Dev') || github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' && 'Test') || 'Dev' }}

jobs:
  env_config:
    name: Resolve Configuration
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      name: ${{ steps.get_config.outputs.name }}
      type: ${{ steps.get_config.outputs.type }}

    steps:
      - id: get_config
        name: Set Outputs
        run: |
          echo "name=$ENVIRONMENT_NAME" >> $GITHUB_OUTPUT
          echo "type=$ENVIRONMENT_TYPE" >> $GITHUB_OUTPUT

      - name: Print Summary
        shell: python
        run: |
          import os

          env_name = '${{ steps.get_config.outputs.name }}'
          env_type = '${{ steps.get_config.outputs.type }}'

          summary = [
              '|  |  |',
              '| --- | --- |',
              f'| Environment name | {env_name}',
              f'| Environment type | {env_type}'
          ]

          github_step_summary = os.environ.get('GITHUB_STEP_SUMMARY', None)
          if github_step_summary:
              with open(github_step_summary, 'a+') as f:
                  f.write('\n'.join(summary))
